/*
broadcast 1.1
JavaScript function passing done the Scratch way
open-source under the MIT license, (c) Ethan Arterberry, 2015

<broadcast.coffee>
written in CoffeeScript, JavaScript done right
 */
var Broadcast;

Broadcast = (function() {
  function Broadcast() {
    this.broadcasts = {};
    if (typeof console !== "undefined" && console !== null) {
      console.log("New Broadcast class created.");
    }
  }

  Broadcast.prototype.create = function(id, execute) {
    if (id && execute) {
      this.broadcasts[id] = function() {
        return execute();
      };
      return typeof console !== "undefined" && console !== null ? console.log("Broadcast with ID \"" + id + "\" has been set up to execute functions:\n\t%s\nwhen called.", execute.toString().replace(/\n/g, "\n\t")) : void 0;
    } else {
      return typeof console !== "undefined" && console !== null ? console.error("Please pass all parameters (id, execute) to Broadcast::create.") : void 0;
    }
  };

  Broadcast.prototype.shout = function(id, sync, _callback) {
    if (id) {
      if (sync) {
        switch (sync) {
          case "async":

            /*@cc_on
              // conditional IE < 9 only fix for setTimeout params
              @if (@_jscript_version <= 9)
              (function(f){
                 window.setTimeout =f(window.setTimeout);
                 window.setInterval =f(window.setInterval);
              })(function(f){return function(c,t){var a=[].slice.call(arguments,2);return f(function(){c.apply(this,a)},t)}});
              @end
            @
             */
            return setTimeout(function(broadcasts) {
              broadcasts[id]();
              if (_callback) {
                return _callback();
              }
            }, 0, this.broadcasts);
          case "sync":
            this.broadcasts[id]();
            if (_callback) {
              return _callback();
            }
            break;
          default:
            if (_callback) {
              return _callback();
            }
        }
      } else {
        if (_callback) {
          return _callback();
        }
      }
    } else {
      return typeof console !== "undefined" && console !== null ? console.error("Please pass the \"id\" parameter to Broadcast::shout.") : void 0;
    }
  };

  Broadcast.prototype.modify = function(id, execute, newid) {
    var oldexecute;
    if (id) {
      if (execute) {
        oldexecute = function(broadcasts) {
          return broadcasts[id];
        };
        this.broadcasts[id] = function() {
          return execute;
        };
        if (typeof console !== "undefined" && console !== null) {
          console.log("Broadcast with ID \"" + id + "\" has been modified to execute code:\n\t%s\ninstead of functions:\n[%s]\nwhen called.", execute.toString().replace(/\n/g, "\n\t"), oldexecute(this.broadcasts).toString().replace(/\n/g, "\n\t"));
        }
      }
      if (newid) {
        this.broadcasts["" + newid] = this.broadcasts[id];
        delete this.broadcasts[id];
        return typeof console !== "undefined" && console !== null ? console.log("Broadcast with ID \"" + id + "\" has been renamed to \"" + newid + "\".") : void 0;
      }
    } else {
      return typeof console !== "undefined" && console !== null ? console.error("Please pass the \"id\" parameter to Broadcast::modify.") : void 0;
    }
  };

  Broadcast.prototype.add = function(id, execute) {
    var oldexecute;
    if (id && execute) {
      oldexecute = this.broadcasts[id];
      this.broadcasts[id] = function() {
        oldexecute();
        return execute();
      };
      return typeof console !== "undefined" && console !== null ? console.log("Broadcast with ID \"" + id + "\" has been set up to execute newly added code:\n\t%s\nwhen called.", execute.toString().replace(/\n/g, "\n\t")) : void 0;
    } else {
      return typeof console !== "undefined" && console !== null ? console.error("Please pass all parameters (id, execute) to Broadcast::add.") : void 0;
    }
  };

  return Broadcast;

})();

// ---
// generated by coffee-script 1.9.2